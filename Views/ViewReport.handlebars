<style>
    #output{
        width: 100%;
        height: 70vh;
        overflow:scroll;
        border: 1px solid black;
    }
</style>
<div class="row">
    <div class="col-12 ">
        <h4 style="font-family:impact;" class="p-2 bg-dark text-center text-white">{{ReportName}}</h4>
    </div>
    <div class="col-8 p-2">
        
        <h3><a style="text-decoration:none;" href="Reports"><i class="fa fa-chevron-left"></i> Reports List</a></h3>
    </div>
    <div class="col-4 p-2">
        <label for="">Report Style:</label>
        <select class="form-control" id="reports_style">
            <option value="pivottable">Pivot Table (Default)</option>
            <option value="webreport">Web Report (Secondary)</option>
        </select>
    </div>
    
    <div class="col-12">
        {{!-- {{{Table}}} --}}
        <div id="output" class="p-2"  ></div>
    </div>
</div>

<style>
    #tablify thead th{
        font-family: 'Roboto' !important;
        font-weight: bold !important;
        font-size: 15px !important;
        text-transform: uppercase !important;
    }


 #tablify tbody tr td{
        font-family: 'Roboto' !important;
        font-size: 10px !important;
    }

</style>

<script>
    let reportStyle = 'pivottable'
    $(()=>{
        fetchReport();
        $('#reports_style').change(()=>{
            reportStyle = $('#reports_style').val();
            fetchReport();
        });
    })

    let fetchReport = async()=>{
        try{
            //Get reports_id from url
            const params = new URLSearchParams(window.location.search)
            console.log(params)
            const reports_id = params.get('reports_id')
            console.log(reports_id)
            //Get report data
            const response = await fetch(`${BASE_URL}/Reports/fetch/${reports_id}`)
            const data = await response.json()
            if(data.status == 'success'){
                //Render report data
                $("#output").html('')
                if(reportStyle == 'pivottable'){
                    renderPivotReport(data.Report)
                }else{
                    renderWebReport(data.Report)
                }
            }else{
                alert(data.message)
            }
        }catch(err){
            alert(err.message)
        }
    }

    let renderPivotReport = (report)=>{
        let convertedKeys = []
        let dataString = JSON.stringify(report.data)
        report.keys.forEach((key, index)=>{
            let ckey =  key.replace(/([a-z])([A-Z])/g, '$1 $2')
            dataString = dataString.replace(`\"${key}\":`, `\"${ckey}\":`)
            convertedKeys.push(ckey)
        })
        console.log("Converted Keys : ",convertedKeys)
        console.log('Converted Data : ', JSON.parse(dataString))
        $(function(){
             google.load("visualization", "1", {packages:["corechart", "charteditor"]});
           
            var derivers = $.pivotUtilities.derivers;
            var renderers = {}
            $.extend(renderers,$.pivotUtilities.renderers, $.pivotUtilities.d3_renderers,$.pivotUtilities.c3_renderers,$.pivotUtilities.plotly_renderers,
            $.pivotUtilities.export_renderers, $.pivotUtilities.gchart_renderers);

            $('#output').pivotUI(report.data,{
                renderers,
                rows:report.keys,
                cols:[],
                vals:[],
                aggregatorName: "Sum",
                rendererName: "Table",
                rendererOptions: {
                    gchart: {width: 700, height: 500},
                    table: {
                        clickCallback: function(e, value, filters, pivotData){
                            var names = [];
                            pivotData.forEachMatchingRecord(filters,
                                function(record){ names.push(record.Name); });
                            alert(names.join("\n"));
                        }
                    }
                }
            })
        })
    }

    const renderWebReport = async (report)=>{
        console.log(report)
        //console.log()
        try{
            var pivot = new WebDataRocks({
            container: "#output",
            toolbar: true,
            report: {
                height:500,
                dataSource: {
                    data: report.data
                },
                grid:{
                    type:'flat'
                }
            }
        });
          
        }catch(err){
            console.log(err)
        }
    }
</script>
